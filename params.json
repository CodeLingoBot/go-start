{"name":"go-start","body":"go-start is a high level web-framework for Go, like Django for Python or Rails for Ruby.\r\n\r\nInstallation:\r\ngo get github.com/ungerik/go-start\r\n\r\nDocumentation:\r\nhttp://go-start.org/pkg/github.com/ungerik/go-start/\r\n\r\nPresentation Slides:\r\nhttp://speakerdeck.com/u/ungerik/\r\n\r\nFirst real world application:\r\nhttp://startuplive.in/\r\n\r\nCopyright (c) 2012 Erik Unger\r\nMIT License See: LICENSE file\r\n\r\n\r\nIntro:\r\n======\r\n\r\nFeatures:\r\n\r\n* HTML views can be defined in Go syntax\r\n* Optional template system\r\n* HTML5 Boilerplate page template (Mustache template, will be changed to Go v1 template)\r\n* Unified data model for forms and databases\r\n* Data models are simple Go structs\r\n* MongoDB as default database\r\n* User management/authentication out of the box\r\n* Additional packages for\r\n\t* Email (Google Mail defaults): http://github.com/ungerik/go-mail\r\n\t* Gravatar: http://github.com/ungerik/go-gravatar\r\n\t* RSS parsing: http://github.com/ungerik/go-rss\r\n\t* Amiando event management: http://github.com/ungerik/go-amiando\r\n\t\t(used by http://startuplive.in)\r\n\r\n\r\nViews:\r\n======\r\n\r\nThe philosophy for creating HTML views is (unlike Rails/Django) that you should\r\nnot have to learn yet another language to be able to write templates.\r\nThere are several very simple template languages out there that reduce program\r\ncode like logic within the template, but itâ€™s still yet another syntax to learn.\r\n\r\nIn go-start the HTML structure of a page is represented by a structure of\r\ntype safe Go objects.\r\nIt should feel like writing HTML but using the syntax of Go.\r\nAnd no, it has nothing to do with the mess of intertwined markup and code in PHP.\r\n\r\nExample of a static view:\r\n\r\n\tview := Views{\r\n\t\tDIV(\"myclass\",\r\n\t\t\tH1(\"Example HTML structure\"),\r\n\t\t\tP(\"This is a paragraph\"),\r\n\t\t\tP(\r\n\t\t\t\tHTML(\"Some unescaped HTML:<br/>\"),\r\n\t\t\t\tPrintf(\"The number of the beast: %d\", 666),\r\n\t\t\t\tEscape(\"Will be escaped: 666 < 999\"),\r\n\t\t\t),\r\n\t\t\tA_blank(\"http://go-lang.org\", \"A very simple link\"),\r\n\t\t),\r\n\t\tHR(),\r\n\t\tPRE(\"\t<- pre formated text, followed by a list:\"),\r\n\t\tUL(\"red\", \"green\", \"blue\"),\r\n\t\t&Template{\r\n\t\t\tFilename: \"mytemplate.html\",\r\n\t\t\tGetContext: func(requestContext *Context) (interface{}, error) {\r\n\t\t\t\treturn map[string]string{\"Key\": \"Value\"}, nil\r\n\t\t\t},\r\n\t\t},\r\n\t}\r\n\r\nExample of a dynamic view:\r\n\r\n\tview := NewDynamicView(\r\n\t\tfunc(context *Context) (view View, err error) {\r\n\t\t\tvar names []string\r\n\t\t\ti := models.Users.Sort(\"Name.First\").Sort(\"Name.Last\").Iterator();\r\n\t\t\tfor doc := i.Next(); doc != nil; doc = i.Next() {\r\n\t\t\t\tnames = append(names, doc.(*models.User).Name.String())\r\n\t\t\t}\r\n\t\t\tif i.Err() != nil {\r\n\t\t\t\treturn nil, i.Err()\r\n\t\t\t}\t\t\t\r\n\t\t\treturn &List{\t// List = higher level abstraction, UL() = shortcut\r\n\t\t\t\tClass: \"my-ol\",\r\n\t\t\t\tOrdered: true,\r\n\t\t\t\tModel: EscapeStringsListModel(names),\r\n\t\t\t}, nil\r\n\t\t},\r\n\t)\r\n\r\nBeside DynamicView there is also a ModelView. It takes a model.Iterator\r\nand creates a dynamic view for every iterated data item:\r\n\r\n\tview := &ModelView{\r\n\t\tGetModelIterator: func(context *Context) model.Iterator {\r\n\t\t\treturn models.Users.Sort(\"Name.First\").Sort(\"Name.Last\").Iterator()\r\n\t\t},\r\n\t\tGetModelView: func(model interface{}, context *Context) (view View, err error) {\r\n\t\t\tuser := model.(*models.User)\r\n\t\t\treturn PrintfEscape(\"%s, \", user.Name), nil\r\n\t\t},\r\n\t}\r\n\r\n\r\nPages and URLs:\r\n===============\r\n\r\n\tHomepage := &Page{\r\n\t\tOnPreRender: func(page *Page, context *Context) (err error) {\r\n\t\t\tcontext.Data = &PerPageData{...} // Set global page data at request context\r\n\t\t},\r\n\t\tWriteTitle: func(context *Context, writer io.Writer) (err error) {\r\n\t\t\twriter.Write([]byte(context.Data.(*PerPageData).DynamicTitle))\r\n\t\t\treturn nil\r\n\t\t},\r\n\t\tCSS:          HomepageCSS,\r\n\t\tWriteHeader:  RSS(\"go-start.org RSS Feed\", &RssFeed)\r\n\t\tWriteScripts: PageWriters(\r\n\t\t\tConfig.Page.DefaultWriteScripts,\r\n\t\t\tJQuery,   // jQuery/UI is built-in\r\n\t\t\tJQueryUI,\r\n\t\t\tJQueryUIAutocompleteFromURL(\".select-username\", IndirectURL(&API_Usernames), 2),\r\n\t\t\tGoogleAnalytics(GoogleAnalyticsID), // Google Analytics is built-in\r\n\t\t)\r\n\t\tContent: Views{},\r\n\t}\r\n\r\n\r\n\tAdmin_Auth := NewBasicAuth(\"go-start.org\", \"admin\", \"password123\")\r\n\r\n\tfunc Paths() *ViewPath {\r\n\t\treturn &ViewPath{View: Homepage, Sub: []ViewPath{                           // /\r\n\t\t\t{Name: \"style.css\", View: HomepageCSS},                             // /style.css\r\n\t\t\t{Name: \"feed\", View: RssFeed},                                      // /feed/\r\n\t\t\t{Name: \"admin\", View: Admin, Auth: Admin_Auth, Sub: []ViewPath{     // /admin/\r\n\t\t\t\t{Name: \"user\", Args: 1, View: Admin_User, Auth: Admin_Auth}, // /admin/user/<USER_ID>/\r\n\t\t\t}},\r\n\t\t\t{Name: \"api\", Sub: []ViewPath{                                      // 404 because no view defined\r\n\t\t\t\t{Name: \"users.json\", View: API_Usernames},                  // /api/users.json\r\n\t\t\t}},\r\n\t\t}\r\n\t}\r\n\r\n\tview.Init(\"go-start.org\", CookieSecret, \"pkg/myproject\", \"pkg/gostart\") // Set site name, cookie secret and static paths\r\n\tview.Config.RedirectSubdomains = []string{\"www\"}     // Redirect from www.\r\n\tview.Config.Page.DefaultMetaViewport = \"width=960px\" // Page width for mobile devices\r\n\tview.RunConfigFile(Paths(), \"run.config\")            // Run server with path structure and values from config file\r\n\r\n\r\n\r\n\r\nModels:\r\n=======\r\n\r\nData is abstacted as models. The same model abstraction and data validation is\r\nused for HTML forms and for databases. So a model can be loaded from a database,\r\ndisplayed as an HTML form and saved back to the database after submit.\r\nThis is not always a good practice, but it shows how easy things can be.\r\n\r\nA model is a simple Go struct that uses gostart/model types as struct members.\r\nCustom model wide validation is done by adding a Validate() method to the\r\nstruct type:\r\n\r\n\ttype SignupFormModel struct {\r\n\t\tEmail     model.Email    `gostart:\"required\"`\r\n\t\tPassword1 model.Password `gostart:\"required|label=Password|minlen=6\"`\r\n\t\tPassword2 model.Password `gostart:\"label=Repeat password\"`\r\n\t}\r\n\r\n\tfunc (self *SignupFormModel) Validate(metaData model.MetaData) []*model.ValidationError {\r\n\t\tif self.Password1 != self.Password2 {\r\n\t\t\treturn model.NewValidationErrors(os.NewError(\"Passwords don't match\"), metaData)\r\n\t\t}\r\n\t\treturn model.NoValidationErrors\r\n\t}\r\n\r\n\r\nHere is how a HTML form is created that displays input fields for the SignupFormModel:\r\n\r\n\tform := &Form{\r\n\t\tButtonText: \"Signup\",\r\n\t\tFormID:     \"user_signup\",\r\n\t\tGetModel: func(form *Form, context *Context) (interface{}, error) {\r\n\t\t\treturn &SignupFormModel{}, nil\r\n\t\t},\r\n\t\tOnSubmit: func(form *Form, formModel interface{}, context *Context) (err error) {\r\n\t\t\tm := formModel.(*SignupFormModel)\r\n\t\t\t// ... create user in db and send confirmation email ...\r\n\t\t\treturn err\r\n\t\t},\r\n\t}\r\n\r\n\r\nMongoDB is the default database of go-start utilizing Gustavo Niemeyer's\r\ngreat lib mgo (http://labix.org/mgo).\r\n\r\nMongo collections and queries are encapsulated to make them compatible with the\r\ngo-start data model concept, and a little bit easier to use.\r\n\r\nExample of a collection and document struct:\r\n\r\n\tvar ExampleDocs *mongo.Collection = mongo.NewCollection(\"exampledocs\", (*ExampleDoc)(nil))\r\n\r\n\ttype ExampleDoc struct {\r\n\t\tmongo.DocumentBase `bson:\",inline\"`                 // Give it a Mongo ID\r\n\t\tPerson             mongo.Ref  `gostart:\"to=people\"` // Mongo ID ref to a document in \"people\" collection\r\n\t\tLongerText         model.Text `gostart:\"rows=5|cols=80|maxlen=400\"`\r\n\t\tInteger            model.Int  `gostart:\"min=1|max=100\"`\r\n\t\tEmail              model.Email    // Normalization + special treament in forms\r\n\t\tPhoneNumber        model.Phone    // Normalization + special treament in forms\r\n\t\tPassword           model.Password // Hashed + special treament in forms\r\n\t\tSubDoc             struct {\r\n\t\t\tDay       model.Date\r\n\t\t\tDrinks    []mongo.Choice `gostart:\"options=Beer,Wine,Water\"` // Mongo array of strings\r\n\t\t\tRealFloat model.Float    `gostart:\"valid\" // Must be a real float value, not NaN or Inf\r\n\t\t}\r\n\t}\r\n\r\nExample query:\r\n\r\n\ti := models.Users.Filter(\"Name.Last\", \"Smith\").Sort(\"Name.First\").Iterator();\r\n\tfor doc := i.Next(); doc != nil; doc = i.Next() {\r\n\t\tuser := doc.(*models.User)\r\n\t\t// ...\r\n\t}\r\n\t// Err() returns any error after Next() returned nil:\r\n\tif i.Err() != nil {\r\n\t\tpanic(i.Err())\r\n\t}\r\n\r\nA new mongo.Document is always created by the corresponding collection object\r\nto initialize it with meta information about its collection.\r\nThis way it is possible to implement Save() or Remove() methods for the document.\r\n\r\nExample for creating, modifying and saving a document:\r\n\r\n\tuser := models.Users.NewDocument().(*models.User)\r\n\r\n\tuser.Name.First.Set(\"Erik\")\r\n\tuser.Name.Last.Set(\"Unger\")\r\n\r\n\terr := user.Save()\r\n\r\n","tagline":"A high level web-framework for Go","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}